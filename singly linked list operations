import java.util.*;
public class Main{
    Node head;

    class Node{
        int data;
        Node next;
        //Node head;

        Node(int val){
            data = val;
            next = null;
            //head = null;
        }
    }
    Main(){
        head = null;
    }
    public void insertend(int val){
        Node newnode = new Node(val);

        if (head==null){
            head = newnode;
        }
        else{
            Node temp = head;
            while(temp.next != null){
                temp =  temp.next;
            }
            temp.next = newnode;
        }
    }
    public void display1(){
        Node temp = head;

        while(temp != null){
            System.out.print(temp.data+"-->");
            temp = temp.next;
        }
        System.out.print("Null");
    }
    public void insertbegin(int s)
    {
        Node newnode=new Node(s);
        if(head==null)
        {
            head=newnode;
        }
        else
        {
            newnode.next=head;
            head=newnode;
        }
    }
    public void display2(){
        Node temp = head;

        while(temp != null){
            System.out.print(temp.data+"-->");
            temp = temp.next;
        }
        System.out.print("Null");
    }
    public void middle(int pos,int v)
    {
        Node newnode = new Node(v);
        Node temp = head;

        for(int i=1;i<pos;i++)
        {
            temp = temp.next;
        }
        newnode.next = temp.next;
        temp.next = newnode;
    }
    public void display3(){
        Node temp = head;

        while(temp != null){
            System.out.print(temp.data+"-->");
            temp = temp.next;
        }
        System.out.print("Null");
    }
    public void sort(){
        if (head == null || head.next == null ){
            return ;
        }
        else{
            Node index, current;
            int temp;

            for(current = head  ; current.next != null; current = current.next){
                for(index = current.next ; index!= null ; index = index.next){
                    if(current.data > index.data){
                        temp = current.data;
                        current.data = index.data;
                        index.data= temp;
                    }
                }
            }
        }
    }
    public void display(){
        System.out.print("\n");
        Node temp = head;

        while(temp != null){
            System.out.print(temp.data+"-->");
            temp = temp.next;
        }
        System.out.print("Null");
    }
    public void search(int k)
    {   int c=0;
        Node temp=head;
        while(temp!=null)
        {
            if(k==temp.data) {
                System.out.print("Element Found");
                c++;
                break;
            }
            else
            {
                temp=temp.next;
            }
        }
        if(c==0)
            System.out.print("Element not found");
    }

    public static void main(String args[]){
        Scanner sc = new Scanner (System.in);
        Main list = new Main();
        System.out.println("Enter the size of node:");
        int m = sc.nextInt();
        System.out.println("Enter the values");
        for (int i =0 ;i<m;i++) {
            int val = sc.nextInt();
            list.insertend(val);
        }
        list.display1();
        System.out.println("\nEnter the begin value of insertion:");
        int s =sc.nextInt();
        list.insertbegin(s);
        System.out.println("\nAfter beginining insertion process");
        list.display2();
        System.out.println("\ninsert the middle function SLL");
        System.out.println("Enter the position :");
        int pos=sc.nextInt();
        System.out.println("Enter the value:");
        int v=sc.nextInt();
        list.middle(pos,v);
        System.out.println("After middle process");
        list.display3();
        System.out.println("\nsorting function");
        list.sort();
        list.display();
        System.out.println("\nsearching function");
        System.out.println("\nEnter the key value");
        int k=sc.nextInt();
        list.search(k);
    }
}
